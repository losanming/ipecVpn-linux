// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: config_proto.proto

package configService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigClient is the client API for Config service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigClient interface {
	CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error)
	UpdateConfigById(ctx context.Context, in *UpdateConfigByIdRequest, opts ...grpc.CallOption) (*UpdateConfigByIdResponse, error)
	GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error)
	DeleteConfigById(ctx context.Context, in *DeleteConfigByIdRequest, opts ...grpc.CallOption) (*DeleteConfigByIdResponse, error)
	GetInfoByKey(ctx context.Context, in *GetInfoByKeyRequest, opts ...grpc.CallOption) (*GetInfoByKeyResponse, error)
}

type configClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigClient(cc grpc.ClientConnInterface) ConfigClient {
	return &configClient{cc}
}

func (c *configClient) CreateConfig(ctx context.Context, in *CreateConfigRequest, opts ...grpc.CallOption) (*CreateConfigResponse, error) {
	out := new(CreateConfigResponse)
	err := c.cc.Invoke(ctx, "/config_proto.Config/CreateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) UpdateConfigById(ctx context.Context, in *UpdateConfigByIdRequest, opts ...grpc.CallOption) (*UpdateConfigByIdResponse, error) {
	out := new(UpdateConfigByIdResponse)
	err := c.cc.Invoke(ctx, "/config_proto.Config/UpdateConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetConfigList(ctx context.Context, in *GetConfigListRequest, opts ...grpc.CallOption) (*GetConfigListResponse, error) {
	out := new(GetConfigListResponse)
	err := c.cc.Invoke(ctx, "/config_proto.Config/GetConfigList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) DeleteConfigById(ctx context.Context, in *DeleteConfigByIdRequest, opts ...grpc.CallOption) (*DeleteConfigByIdResponse, error) {
	out := new(DeleteConfigByIdResponse)
	err := c.cc.Invoke(ctx, "/config_proto.Config/DeleteConfigById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configClient) GetInfoByKey(ctx context.Context, in *GetInfoByKeyRequest, opts ...grpc.CallOption) (*GetInfoByKeyResponse, error) {
	out := new(GetInfoByKeyResponse)
	err := c.cc.Invoke(ctx, "/config_proto.Config/GetInfoByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServer is the server API for Config service.
// All implementations must embed UnimplementedConfigServer
// for forward compatibility
type ConfigServer interface {
	CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error)
	UpdateConfigById(context.Context, *UpdateConfigByIdRequest) (*UpdateConfigByIdResponse, error)
	GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error)
	DeleteConfigById(context.Context, *DeleteConfigByIdRequest) (*DeleteConfigByIdResponse, error)
	GetInfoByKey(context.Context, *GetInfoByKeyRequest) (*GetInfoByKeyResponse, error)
	mustEmbedUnimplementedConfigServer()
}

// UnimplementedConfigServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServer struct {
}

func (UnimplementedConfigServer) CreateConfig(context.Context, *CreateConfigRequest) (*CreateConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfig not implemented")
}
func (UnimplementedConfigServer) UpdateConfigById(context.Context, *UpdateConfigByIdRequest) (*UpdateConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfigById not implemented")
}
func (UnimplementedConfigServer) GetConfigList(context.Context, *GetConfigListRequest) (*GetConfigListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigList not implemented")
}
func (UnimplementedConfigServer) DeleteConfigById(context.Context, *DeleteConfigByIdRequest) (*DeleteConfigByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfigById not implemented")
}
func (UnimplementedConfigServer) GetInfoByKey(context.Context, *GetInfoByKeyRequest) (*GetInfoByKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByKey not implemented")
}
func (UnimplementedConfigServer) mustEmbedUnimplementedConfigServer() {}

// UnsafeConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServer will
// result in compilation errors.
type UnsafeConfigServer interface {
	mustEmbedUnimplementedConfigServer()
}

func RegisterConfigServer(s grpc.ServiceRegistrar, srv ConfigServer) {
	s.RegisterService(&Config_ServiceDesc, srv)
}

func _Config_CreateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).CreateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config_proto.Config/CreateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).CreateConfig(ctx, req.(*CreateConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_UpdateConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).UpdateConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config_proto.Config/UpdateConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).UpdateConfigById(ctx, req.(*UpdateConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetConfigList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetConfigList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config_proto.Config/GetConfigList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetConfigList(ctx, req.(*GetConfigListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_DeleteConfigById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConfigByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).DeleteConfigById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config_proto.Config/DeleteConfigById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).DeleteConfigById(ctx, req.(*DeleteConfigByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Config_GetInfoByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoByKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServer).GetInfoByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/config_proto.Config/GetInfoByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServer).GetInfoByKey(ctx, req.(*GetInfoByKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Config_ServiceDesc is the grpc.ServiceDesc for Config service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Config_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config_proto.Config",
	HandlerType: (*ConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfig",
			Handler:    _Config_CreateConfig_Handler,
		},
		{
			MethodName: "UpdateConfigById",
			Handler:    _Config_UpdateConfigById_Handler,
		},
		{
			MethodName: "GetConfigList",
			Handler:    _Config_GetConfigList_Handler,
		},
		{
			MethodName: "DeleteConfigById",
			Handler:    _Config_DeleteConfigById_Handler,
		},
		{
			MethodName: "GetInfoByKey",
			Handler:    _Config_GetInfoByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "config_proto.proto",
}
